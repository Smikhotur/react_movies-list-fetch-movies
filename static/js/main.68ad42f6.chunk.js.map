{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","Title","Plot","Poster","imdbID","className","src","alt","href","MoviesList","movies","map","movie","key","getMovie","film","url","fetch","options","then","response","ok","Error","status","statusText","json","FindMovie","addNewMovie","duplicate","deleteDuplicateMessage","useState","value","setValue","setMovie","entered","setEntered","messageDuplicate","setMessageDuplicate","useEffect","checkForMovie","onFindMovie","a","result","htmlFor","type","id","placeholder","onChange","target","onClick","App","data","setMovies","setDuplicate","prevMovie","every","item","findId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.68ad42f6.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  Title,\n  Plot = '',\n  Poster,\n  imdbID,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={Poster}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{Title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {Plot}\n        <br />\n        <a href={`https://www.imdb.com/title/${imdbID}`}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  Title: PropTypes.string.isRequired,\n  Plot: PropTypes.string.isRequired,\n  Poster: PropTypes.string.isRequired,\n  imdbID: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbID} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbID: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = 'https://www.omdbapi.com/?apikey=317c681f&t=';\n\nconst request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  });\n\nexport const getMovie = film => request(film);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api/api';\n\nexport const FindMovie = ({\n  addNewMovie,\n  duplicate,\n  deleteDuplicateMessage,\n}) => {\n  const [value, setValue] = useState('');\n  const [movie, setMovie] = useState('');\n  const [entered, setEntered] = useState(false);\n  const [messageDuplicate, setMessageDuplicate] = useState(false);\n\n  useEffect(() => {\n    setMessageDuplicate(duplicate);\n  });\n\n  const checkForMovie = (film) => {\n    if (film && !film.Error) {\n      setEntered(false);\n    } else {\n      setEntered(true);\n    }\n\n    if (duplicate) {\n      deleteDuplicateMessage();\n    }\n  };\n\n  const onFindMovie = async() => {\n    const result = await getMovie(value);\n\n    setMovie(result);\n\n    checkForMovie(movie);\n  };\n\n  const onAddMovie = () => {\n    if (movie && !movie.Error) {\n      addNewMovie(movie);\n    }\n\n    setValue('');\n    setMovie('');\n    checkForMovie(movie);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder={entered\n                ? 'The input field must be filled'\n                : 'Enter a title to search'\n              }\n              className=\"input is-danger\"\n              value={value}\n              onChange={({ target }) => {\n                setValue(target.value);\n                setEntered(false);\n                deleteDuplicateMessage();\n              }}\n            />\n          </div>\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={onFindMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={onAddMovie}\n\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n      {movie === '' || movie.Error ? (\n        <>\n          <p className=\"help is-danger\">\n            {movie.Error\n              ? 'Can\\'t find a movie with such a title'\n              : ''\n          }\n          </p>\n\n          <p className=\"help is-danger\">\n            {entered && !movie.Error\n              ? 'Find the movie first'\n              : ''\n        }\n          </p>\n        </>\n      ) : (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard {...movie} />\n        </div>\n      )}\n      {messageDuplicate && (\n        <p className=\"help is-danger\">\n          This movie cannot be added to the list because it has already there\n        </p>\n      )}\n\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addNewMovie: PropTypes.func.isRequired,\n  duplicate: PropTypes.bool.isRequired,\n  deleteDuplicateMessage: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n  const [duplicate, setDuplicate] = useState(false);\n\n  const findId = (prevMovie, movie) => prevMovie\n    .every(item => item.imdbID !== movie.imdbID) && movie.imdbID;\n\n  const addNewMovie = (movie) => {\n    setMovies((prevMovie) => {\n      if (findId(prevMovie, movie)) {\n        return [...prevMovie, movie];\n      }\n\n      setDuplicate(true);\n\n      return prevMovie;\n    });\n  };\n\n  const deleteDuplicateMessage = () => {\n    setDuplicate(false);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          addNewMovie={addNewMovie}\n          duplicate={duplicate}\n          deleteDuplicateMessage={deleteDuplicateMessage}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}